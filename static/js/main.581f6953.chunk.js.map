{"version":3,"sources":["Cards.js","api/index.js","Country.js","Footer.js","App.js","serviceWorker.js","index.js","logo.jpg"],"names":["Cards","props","data","TotalConfirmed","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","NewConfirmed","TotalRecovered","NewRecovered","TotalDeaths","NewDeaths","url","fetchdata","country","a","axios","get","Global","mData","Countries","selectedCountry","filter","e","Country","fetchcountry","map","useState","fetchedCountries","setFetchedCountries","useEffect","fetchCountries","FormControl","NativeSelect","defaultValue","onChange","handleCountryChange","target","value","style","background","i","key","Footer","margin","Date","getFullYear","App","state","fetcheddata","setState","this","src","logo","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.581f6953.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { Card, CardContent,Typography,Grid } from '@material-ui/core';\r\nimport { LoopCircleLoading } from 'react-loadingg';\r\nimport CountUp from 'react-countup';\r\n\r\nfunction Cards(props) {\r\n    if(props.data.TotalConfirmed==null)\r\n    {\r\n        return(\r\n        <LoopCircleLoading />\r\n        )\r\n    }\r\n  return (\r\n    <div className=\"cardContainer\" >\r\n      <Grid container spacing={3} justify=\"center\">\r\n            <Grid item component={Card} xs={12} md={3} className =\"infected\">\r\n                <CardContent>\r\n                    <Typography  color=\"textSecondary\"  gutterBottom>Infected</Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        <CountUp\r\n                        start={0}\r\n                        end={props.data.TotalConfirmed}\r\n                        duration={2.5}\r\n                        separator={','}\r\n                        />\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" gutterBottom>Total active cases of COVID 19</Typography>\r\n                    <Typography variant=\"h6\" component=\"h2\">\r\n                    <CountUp\r\n                        start={0}\r\n                        end={props.data.NewConfirmed}\r\n                        duration={2.5}\r\n                        separator={','}\r\n                        />\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" >Daily active cases of COVID 19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className =\"recovered\">\r\n                <CardContent>\r\n                    <Typography  color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                    <CountUp\r\n                        start={0}\r\n                        end={props.data.TotalRecovered}\r\n                        duration={2.5}\r\n                        separator={','}\r\n                        />\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" gutterBottom>Total recoveries from COVID 19</Typography>\r\n                    <Typography variant=\"h6\" component=\"h2\">\r\n                    <CountUp\r\n                        start={0}\r\n                        end={props.data.NewRecovered}\r\n                        duration={2.5}\r\n                        separator={','}\r\n                        />\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" >Daily recoveries from COVID 19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className =\"deaths\">\r\n                <CardContent>\r\n                    <Typography  color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                    <CountUp\r\n                        start={0}\r\n                        end={props.data.TotalDeaths}\r\n                        duration={2.5}\r\n                        separator={','}\r\n                        />\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" gutterBottom>Total deaths from COVID 19</Typography>\r\n                    <Typography variant=\"h6\" component=\"h2\">\r\n                    <CountUp\r\n                        start={0}\r\n                        end={props.data.NewDeaths}\r\n                        duration={2.5}\r\n                        separator={','}\r\n                        />\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" >Daily deaths from COVID 19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n        </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url ='https://api.covid19api.com/summary';\r\n\r\nexport const fetchdata =async (country) =>{\r\n    try {\r\n        if(!country)\r\n        {\r\n            const {data:{Global}}= await axios.get(url);\r\n\r\n            const mData={\r\n                \r\n                NewConfirmed: Global.NewConfirmed,\r\n                NewDeaths: Global.NewDeaths,\r\n                NewRecovered: Global.NewRecovered,\r\n\r\n                TotalConfirmed: Global.TotalConfirmed,\r\n                TotalDeaths: Global.TotalDeaths,\r\n                TotalRecovered: Global.TotalRecovered,\r\n            }\r\n            return mData;\r\n    }\r\n    else{\r\n        const {data:{Countries}}= await axios.get(url);\r\n        const selectedCountry=Countries.filter((e)=>e.Country===country)[0];\r\n\r\n        const mData={\r\n            \r\n            NewConfirmed: selectedCountry.NewConfirmed,\r\n            NewDeaths: selectedCountry.NewDeaths,\r\n            NewRecovered: selectedCountry.NewRecovered,\r\n\r\n            TotalConfirmed: selectedCountry.TotalConfirmed,\r\n            TotalDeaths: selectedCountry.TotalDeaths,\r\n            TotalRecovered: selectedCountry.TotalRecovered,\r\n        }\r\n\r\n        return mData;\r\n    }\r\n    } catch (error) {\r\n        \r\n    }\r\n} \r\n\r\nexport const fetchcountry=async()=>{\r\n    try {\r\n        const {data:{Countries}}=await axios.get(url);\r\n        return Countries.map((country)=>country.Country);\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\n\r\n","import React,{ useState,useEffect } from 'react';\r\nimport { NativeSelect,FormControl } from '@material-ui/core';\r\nimport {fetchcountry} from './api/index'\r\n\r\nconst Country =(props)=>{\r\n    \r\n    const[fetchedCountries,setFetchedCountries]=useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchCountries=async ()=>{\r\n            setFetchedCountries(await fetchcountry());\r\n        }\r\n\r\n        fetchCountries();\r\n    },[setFetchedCountries]);\r\n\r\n    return(\r\n        <div>\r\n            <FormControl className=\"formControl\" >\r\n                <NativeSelect defaultValue=\"\" onChange={(e)=>props.handleCountryChange(e.target.value)}>\r\n                    <option style={{color:\"#FFFAFA\",background:\"#151515\"}} value=\"\">Global</option>\r\n                    {fetchedCountries.map((country,i)=><option style={{color:\"#FFFAF0\",background:\"#151515\"}} key={i} value={country}>{country}</option>)}\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Country;","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <div style={{margin:\"35px\"}}>\r\n            &copy; {new Date().getFullYear()} Copyright: Pr@TheeK\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Cards from './Cards';\nimport Country from './Country';\nimport Footer from './Footer';\nimport { fetchdata} from './api/index'\nimport logo from './logo.jpg';\n\nclass App extends React.Component{\n  state={\n    data:{},\n    country:'',\n  }\n\n  async componentDidMount(){\n    const fetcheddata=await fetchdata();\n\n    this.setState({data:fetcheddata})\n  }\n\n  handleCountryChange =async(country)=>{\n    const fetcheddata=await fetchdata(country);\n\n    this.setState({data:fetcheddata})\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        <img className=\"image\" src={logo} alt={logo}/>\n        <Country handleCountryChange={this.handleCountryChange}/>\n        <Cards data={this.state.data} />\n        <Footer />\n      </div>\n     );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.dd844972.jpg\";"],"sourceRoot":""}